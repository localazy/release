name: Publish Release
description: Publish GitHub release, add Git tag and optionally publish NPM package

inputs:
  app-id:
    description: GitHub app id.
    required: true

  app-key:
    description: GitHub app private key.
    required: true

  npm-publish:
    description: 'Publish to NPM registry. Possible values: "public" or "private".'
    required: false
    default: ''

  npm-private-registry:
    description: Private NPM registry.
    required: false
    default: 'https://registry.npmjs.org'

  npm-token:
    description: NPM auth token.
    required: false
    default: ''

  npm-build:
    description: Build package command. Only executed if "npm-publish" is set.
    required: false
    default: 'npm run build --if-present'

  major-bump:
    description: Bump major version tag after release.
    required: false
    default: 'false'

  major-bump-tag-prefix:
    description: Major version tag prefix.
    required: false
    default: ''

  run-after-install:
    description: Bash code to run after npm install.
    required: false
    default: ''

  node-version:
    description: Node version.
    required: false
    default: '16'

  monorepo-npm-install:
    description: Run npm install in monorepo packages.
    required: false
    default: 'false'

  monorepo-npm-build:
    description: Run npm build in monorepo packages.
    required: false
    default: 'false'

  monorepo-public-npm-token:
    description: Public NPM auth token.
    required: false
    default: ''

  monorepo-public-npm-publish:
    description: Monorepo public npm packages.
    required: false
    default: 'false'

  monorepo-private-npm-token:
    description: Private NPM auth token.
    required: false
    default: ''

  monorepo-private-npm-publish:
    description: Monorepo private npm packages.
    required: false
    default: 'false'

outputs:
  tag:
    description: Package tag.
    value: ${{ steps.version.outputs.package }}

runs:
  using: composite
  steps:
    - uses: localazy/release/setup-npm@v2
      with:
        run-after-install: ${{ inputs.run-after-install }}
        node-version: ${{ inputs.node-version }}

    - run: echo -e "\n${{env.blue}}=== Setup GitHub app authorization ===\n"
      shell: bash

    - id: auth
      uses: tibdex/github-app-token@v2
      with:
        app_id: ${{ inputs.app-id }}
        private_key: ${{ inputs.app-key }}

    - run: echo -e "\n${{env.blue}}=== Read package.json version ===\n"
      shell: bash

    - id: version
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        echo "package=$PACKAGE_VERSION" >> "$GITHUB_OUTPUT"
        MAJOR_VERSION=${PACKAGE_VERSION%%.*}
        echo "major=$MAJOR_VERSION" >> "$GITHUB_OUTPUT"
      shell: bash

    - run: echo -e "\n${{env.blue}}=== Generate changelog for GitHub release ===\n"
      shell: bash

    - id: changelog
      run: |
        {
          echo 'release-changelog<<EOF'
          npx conventional-changelog -p @localazy/preset -r 1
          echo EOF
        } > "$GITHUB_OUTPUT"
      shell: bash

    - if: inputs.npm-publish != ''
      run: echo -e "\n${{env.blue}}=== Build NPM package ===\n"
      shell: bash

    - if: inputs.npm-publish != ''
      run: $(echo "${{ inputs.npm-build }}")
      shell: bash

    - if: inputs.npm-publish == 'private'
      run: echo -e "\n${{env.blue}}=== Publish private NPM package ===\n"
      shell: bash

    - if: inputs.npm-publish == 'private'
      run: |
        NPM_TOKEN=${{ inputs.npm-token }}
        NODE_VERSION=${{ inputs.node-version }}
        NPMRC_AUTH_EXISTS=$(grep -c _auth .npmrc)

        if [ $NODE_VERSION == '20' ]
        then
          if [ ${NPMRC_AUTH_EXISTS:-0} == 0 ] && [ $NPM_TOKEN != '' ]; then npm config set //registry.npmjs.org/:_authToken=$NPM_TOKEN --location=project; fi
        else
          if [ ${NPMRC_AUTH_EXISTS:-0} == 0 ] && [ $NPM_TOKEN != '' ]; then npm config set _auth=$NPM_TOKEN --location=project; fi
        fi

        npm publish --registry=${{ inputs.npm-private-registry }}
        rm .npmrc 2> /dev/null || true
        git checkout .npmrc 2> /dev/null || true
      shell: bash

    - if: inputs.npm-publish == 'public'
      run: echo -e "\n${{env.blue}}=== Publish public NPM package ===\n"
      shell: bash

    - if: inputs.npm-publish == 'public'
      run: |
        npm config set "registry=https://registry.npmjs.org" --location=project
        npm config set "//registry.npmjs.org/:_authToken=${{ inputs.npm-token }}" --location=project
        if  [ ${{ inputs.node-version }} == 16* ]; then npm config set "always-auth=true" --location=project; fi
        npm publish --access=public
        rm .npmrc 2> /dev/null || true
        git checkout .npmrc 2> /dev/null || true
      shell: bash

    - if: inputs.monorepo-npm-install != 'false'
      run: |
        PROJECT_ROOT=$(pwd)
        declare -a NPM_INSTALL_LIST=(${{ inputs.monorepo-npm-install }})
        for item in "${NPM_INSTALL_LIST[@]}"; do
          cd $PROJECT_ROOT
          cd "$item"
          npm ci
        done
      shell: bash

    - if: inputs.monorepo-npm-build != 'false'
      run: |
        PROJECT_ROOT=$(pwd)
        declare -a NPM_BUILD_LIST=(${{ inputs.monorepo-npm-build }})
        for item in "${NPM_BUILD_LIST[@]}"; do
          cd $PROJECT_ROOT
          cd "$item"
          npm run build
        done
      shell: bash

    - if: inputs.monorepo-private-npm-publish != 'false' && inputs.monorepo-private-npm-token != ''
      run: |
        PROJECT_ROOT=$(pwd)
        declare -a PRIVATE_NPM_LIST=(${{ inputs.monorepo-private-npm-publish }})
        for item in "${PRIVATE_NPM_LIST[@]}"; do
          cd $PROJECT_ROOT
          cd "$item"
          NPM_TOKEN=${{ inputs.monorepo-private-npm-token }}
          NPMRC_AUTH_EXISTS=$(grep -c _auth .npmrc)
          if [ ${NPMRC_AUTH_EXISTS:-0} == 0 ] && [ $NPM_TOKEN != '' ]; then npm config set _auth=$NPM_TOKEN --location=project; fi
          npm publish --registry=${{ inputs.npm-private-registry }}
          rm .npmrc 2> /dev/null || true
          git checkout .npmrc 2> /dev/null || true
        done
      shell: bash

    - if: inputs.monorepo-public-npm-publish != 'false' && inputs.monorepo-public-npm-token != ''
      run: |
        PROJECT_ROOT=$(pwd)
        declare -a PUBLIC_NPM_LIST=(${{ inputs.monorepo-public-npm-publish }})
        for item in "${PUBLIC_NPM_LIST[@]}"; do
          cd $PROJECT_ROOT
          cd "$item"
          npm config set "registry=https://registry.npmjs.org" --location=project
          npm config set "//registry.npmjs.org/:_authToken=${{ inputs.monorepo-public-npm-token }}" --location=project
          if  [ ${{ inputs.node-version }} == 16* ]; then npm config set "always-auth=true" --location=project; fi
          npm publish --access=public
          rm .npmrc 2> /dev/null || true
          git checkout .npmrc 2> /dev/null || true
        done
      shell: bash

    - run: echo -e "\n${{env.blue}}=== Add Git tag and publish GitHub release ===\n"
      shell: bash

    - uses: ncipollo/release-action@v1
      with:
        name: ${{ steps.version.outputs.package }}
        tag: ${{ steps.version.outputs.package }}
        body: ${{ steps.changelog.outputs.release-changelog }}
        token: ${{ steps.auth.outputs.token }}
        skipIfReleaseExists: true

    - if: inputs.major-bump == 'true'
      run: echo -e "\n${{env.blue}}=== Update major version tag ===\n"
      shell: bash

    - if: inputs.major-bump == 'true'
      uses: thejeff77/action-push-tag@v1.0.0
      with:
        tag: '${{ inputs.major-bump-tag-prefix }}${{ steps.version.outputs.major }}'
        force: true

    - run: echo -e "\n${{env.blue}}=== Delete release branch ===\n"
      shell: bash

    - run: git push origin -d release || true
      shell: bash

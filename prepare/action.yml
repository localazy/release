name: Prepare Release PR
description: Create or update release branch and PR

inputs:
  app-id:
    description: GitHub app id.
    required: true

  app-key:
    description: GitHub app private key.
    required: true

  run-after-install:
    description: Bash code to run after npm install.
    required: false
    default: ''

  node-version:
    description: Node version.
    required: false
    default: '16'

  node-version-file:
    description: Node version file.
    required: false
    default: ''

  badges:
    description: Generate badges.
    required: false

  badges-coverage:
    description: ''
    required: false
    default: >
      node -p "require('./coverage/coverage-summary.json').total.lines.pct"

  badges-size:
    description: ''
    required: false
    default: ''

  badges-version:
    description: ''
    required: false
    default: > 
      node -p "require('./package.json').version"

  badges-license:
    description: ''
    required: false
    default: >
      node -p "require('./package.json').license"

  badges-size-command:
    description: ''
    required: false
    default: >
      npm run build

  badges-coverage-command:
    description: ''
    required: false
    default: >
      npm run test:coverage

  monorepo-bump:
    description: Monorepo paths.
    required: false
    default: 'false'

runs:
  using: composite
  steps:
    - if: inputs.monorepo-bump == 'false'
      run: |
        npm version ${{ steps.recommended-bump.outputs.type }} --git-tag-version false
      shell: bash

    - if: inputs.monorepo-bump != 'false'
      run: |
        PROJECT_ROOT=$(pwd)
        declare -a BUMP_LIST=(${{ inputs.monorepo-bump }})
        for item in "${BUMP_LIST[@]}"; do
          cd $PROJECT_ROOT
          cd "$item"
          npm version ${{ steps.recommended-bump.outputs.type }} --git-tag-version false
        done
      shell: bash

    - run: echo -e "\n${{env.blue}}=== Generate changelog preview for PR ===\n"
      shell: bash

    - id: changelog
      run: |
        {
          echo 'changelog-preview<<EOF'
          npx conventional-changelog -p @localazy/preset -c node_modules/@localazy/conventional-changelog-preset/config/short-pr.json -u
          echo EOF
        } >> "$GITHUB_OUTPUT"
      shell: bash

    - run: echo -e "\n${{env.blue}}=== Update CHANGELOG.md ===\n"
      shell: bash

    - run: npx conventional-changelog -p @localazy/preset -u -i CHANGELOG.md -s
      shell: bash

    - if: inputs.badges == 'true'
      run: echo -e "\n${{env.blue}}=== Generate badges ===\n"
      shell: bash

    - if: inputs.badges == 'true'
      id: text
      run: |
        $(echo "${{ inputs.badges-size-command }}")
        $(echo "${{ inputs.badges-coverage-command }}")

        VERSION=$(${{ inputs.badges-version }})
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"

        LICENSE=$(${{ inputs.badges-license }})
        echo "license=$LICENSE" >> "$GITHUB_OUTPUT"

        COVERAGE=$(${{ inputs.badges-coverage }})
        echo "coverage=$COVERAGE" >> "$GITHUB_OUTPUT"

        if [ "${{ inputs.badges-size }}" != "" ]
        then
          SIZE=$(gzip -c ${{ inputs.badges-size }} | wc -c);
          echo "size=$SIZE" >> "$GITHUB_OUTPUT"
        fi
      shell: bash

    - if: inputs.badges == 'true'
      uses: localazy/release/generate-badges@v2
      with:
        version: ${{ steps.rows.outputs.version }}
        license: ${{ steps.rows.outputs.license }}
        coverage: ${{ steps.rows.outputs.coverage }}
        size: ${{ steps.rows.outputs.size }}

    - run: echo -e "\n${{env.blue}}=== Prepare release branch and create PR ===\n"
      shell: bash

    - uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ steps.auth.outputs.token }}
        branch: release
        labels: release-preview
        commit-message: "ðŸš€ release: ${{ steps.bump.outputs.package-version }}"
        title: ${{ steps.bump.outputs.package-version }}
        body: ${{ steps.changelog.outputs.changelog-preview }}

name: Prepare Release PR
description: Create or update release branch and PR

inputs:
  app-id:
    description: GitHub app id.
    required: true

  app-key:
    description: GitHub app private key.
    required: true

  run-after-install:
    description: Bash code to run after npm install.
    required: false
    default: ''

  node-version:
    description: Node version.
    required: false
    default: '16'

  generate-badges:
    description: Generate badges.
    required: false

runs:
  using: composite
  steps:
    - uses: localazy/release/setup-npm@v2
      with:
        run-after-install: ${{ inputs.run-after-install }}
        node-version: ${{ inputs.node-version }}

    - run: echo -e "\n${{env.blue}}=== Setup GitHub app authorization ===\n"
      shell: bash

    - id: auth
      uses: tibdex/github-app-token@v2
      with:
        app_id: ${{ inputs.app-id }}
        private_key: ${{ inputs.app-key }}

    - run: echo -e "\n${{env.blue}}=== Bump package.json version ===\n"
      shell: bash

    - id: bump
      run: |
        BUMP_TYPE=$(npx conventional-recommended-bump -p @localazy/conventional-changelog-preset)
        npm version $BUMP_TYPE --git-tag-version false
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        echo "package-version=$PACKAGE_VERSION" >> "$GITHUB_OUTPUT"
      shell: bash

    - run: echo -e "\n${{env.blue}}=== Generate changelog preview for PR ===\n"
      shell: bash

    - id: changelog
      run: |
        {
          echo 'changelog-preview<<EOF'
          npx conventional-changelog -p @localazy/preset -c node_modules/@localazy/conventional-changelog-preset/config/short-pr.json -u
          echo EOF
        } >> "$GITHUB_OUTPUT"
      shell: bash

    - run: echo -e "\n${{env.blue}}=== Update CHANGELOG.md ===\n"
      shell: bash

    - run: npx conventional-changelog -p @localazy/preset -u -i CHANGELOG.md -s
      shell: bash

    - if: inputs.generate-badges == 'true'
      run: echo -e "\n${{env.blue}}=== Generate badges ===\n"
      shell: bash

    - if: inputs.generate-badges == 'true'
      id: data
      run: |
        npm run test:coverage
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"
        LICENSE=$(node -p "require('./package.json').license")
        echo "license=$LICENSE" >> "$GITHUB_OUTPUT"
        COVERAGE=$(node -p "require('./coverage/coverage-summary.json').total.lines.pct")
        echo "coverage=$COVERAGE" >> "$GITHUB_OUTPUT"
        BADGES_PATH=.github/badges
        echo "path=$BADGES_PATH" >> "${GITHUB_OUTPUT}"
        mkdir -p $BADGES_PATH
      shell: bash

    - if: inputs.generate-badges == 'true'
      name: Version badge
      uses: emibcn/badge-action@v2.0.2
      with:
        label: npm
        status: ${{ steps.data.outputs.version }}
        color: 0558bd,066fef
        path: ${{ steps.data.outputs.path }}/version.svg

    - if: inputs.generate-badges == 'true'
      name: License badge
      uses: emibcn/badge-action@v2.0.2
      with:
        label: license
        status: ${{ steps.data.outputs.license }}
        color: 0558bd,066fef
        path: ${{ steps.data.outputs.path }}/license.svg

    - if: inputs.generate-badges == 'true'
      name: Coverage badge
      uses: emibcn/badge-action@v2.0.2
      with:
        label: coverage
        status: ${{ steps.data.outputs.coverage }}%
        color: ${{ steps.data.outputs.coverage > 90 && 'green'
          || steps.data.outputs.coverage > 80 && 'yellow,green'
          || steps.data.outputs.coverage > 70 && 'yellow'
          || steps.data.outputs.coverage > 60 && 'orange,yellow'
          || steps.data.outputs.coverage > 50 && 'orange'
          || steps.data.outputs.coverage > 40 && 'red,orange'
          || steps.data.outputs.coverage > 30 && 'red,red,orange'
          || steps.data.outputs.coverage > 20 && 'red,red,red,orange'
          || 'red' }}
        path: ${{ steps.data.outputs.path }}/coverage.svg

    - run: echo -e "\n${{env.blue}}=== Prepare release branch and create PR ===\n"
      shell: bash

    - uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ steps.auth.outputs.token }}
        branch: release
        labels: release-preview
        commit-message: "ðŸš€ release: ${{ steps.bump.outputs.package-version }}"
        title: ${{ steps.bump.outputs.package-version }}
        body: ${{ steps.changelog.outputs.changelog-preview }}
